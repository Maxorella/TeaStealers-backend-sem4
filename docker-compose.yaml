services:
  db:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./db/migrations:/docker-entrypoint-initdb.d
    env_file:
      - ./.env
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ouzi-network
  main:
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    container_name: mainService
    build:
      context: ./
      dockerfile: ./build/main.Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - .env
    volumes:
      - "ouzi_dir:/ouzi/audio"  # Именованный volume для хранения аудио
    networks:
      - ouzi-network
  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"  # Указываем локальный путь /data
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - minio_data:/data  # Том для хранения данных
    networks:
      - ouzi-network



  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ouzi-network

  node_exporter:
    depends_on:
      - prometheus
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    hostname: node_exporter
    ports:
      - "9100:9100"
    networks:
      - ouzi-network

  grafana:
    image: grafana/grafana-enterprise
    volumes:
      - gragana_ouzi:/var/lib/grafana/
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=root
      - GF_SECURITY_ADMIN_PASSWORD=root
    networks:
      - ouzi-network


volumes:
  gragana_ouzi:
    driver: local
  ouzi_dir:  # Именованный volume
    driver: local
  minio_data:  # Именованный volume для MinIO
    driver: local
  postgresdb-data:
    driver: local

networks:
  ouzi-network:
    name: ouzi-network
    driver: bridge
